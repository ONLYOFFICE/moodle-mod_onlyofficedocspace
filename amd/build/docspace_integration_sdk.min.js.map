{"version":3,"file":"docspace_integration_sdk.min.js","sources":["../src/docspace_integration_sdk.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module mod_onlyofficedocspace/docspace_integration_sdk\n * @copyright  2024 Ascensio System SIA <integration@onlyoffice.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n **/\n\n/* eslint-disable no-undef, no-console */\ndefine([], function() {\n    const DOCSPACE_API_URL = \"static/scripts/sdk/1.0.1/api.js\";\n\n    const initScript = async(id, url) => {\n        return new Promise((resolve, reject) => {\n            try {\n                // If DocSpace is defined return resolve.\n                if (typeof DocSpace !== \"undefined\" && DocSpace !== null) {\n                    return resolve(null);\n                }\n\n                if (url === null) {\n                    return reject(\"DocSpace Url is not defined!\");\n                }\n\n                const existedScript = document.getElementById(id);\n\n                if (existedScript) {\n                    // If the script element is found, wait for it to load.\n                    let intervalHandler = setInterval(() => {\n                        const loading = existedScript.getAttribute(\"loading\");\n                        if (loading) {\n                            // If the download is not completed, continue to wait.\n                            return;\n                        } else {\n                            // If the download is completed, stop the wait.\n                            clearInterval(intervalHandler);\n\n                            // If DocSpace is defined, after loading return resolve.\n                            if (typeof DocSpace !== \"undefined\") {\n                                return resolve(null);\n                            }\n\n                            // If DocSpace is not defined, delete the existing script and create a new one.\n                            const script = _createScriptTag(id, url, resolve, reject);\n                            existedScript.remove();\n                            document.body.appendChild(script);\n                        }\n                    }, 500);\n                } else {\n                    // If the script element is not found, create it.\n                    const script = _createScriptTag(id, url, resolve, reject);\n                    document.body.appendChild(script);\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        });\n    };\n\n    const _createScriptTag = (id, url, resolve, reject) => {\n        const script = document.createElement(\"script\");\n\n        script.id = id;\n        script.type = \"text/javascript\";\n        script.src = url.endsWith(\"/\") ? url + DOCSPACE_API_URL : url + \"/\" + DOCSPACE_API_URL;\n        script.async = true;\n\n        script.onload = () => {\n            // Remove attribute loading after loading is complete.\n            script.removeAttribute(\"loading\");\n            resolve(null);\n        };\n        script.onerror = (error) => {\n            // Remove attribute loading after loading is complete.\n            script.removeAttribute(\"loading\");\n            reject(error);\n        };\n\n        script.setAttribute(\"loading\", \"\");\n\n        return script;\n    };\n\n    const checkInit = function() {\n        return typeof DocSpace !== \"undefined\" && DocSpace !== null;\n    };\n\n    const loginByPassword = function(frameId, email, password, onSuccessLogin, onUnSuccessLogin, onAppError) {\n        loginByPasswordHash(\n            frameId,\n            email,\n            // eslint-disable-next-line no-unused-vars\n            async function(email) {\n                const hashSettings = await DocSpace.SDK.frames[frameId].getHashSettings();\n                const passwordHash = await DocSpace.SDK.frames[frameId].createHash(password.trim(), hashSettings);\n\n                return passwordHash;\n            },\n            onSuccessLogin,\n            onUnSuccessLogin,\n            onAppError\n        );\n    };\n\n    const loginByPasswordHash = function(frameId, email, onRequestPasswordHash, onSuccessLogin, onUnSuccessLogin, onAppError) {\n        DocSpace.SDK.initSystem({\n            frameId: frameId,\n            width: \"100%\",\n            height: \"100%\",\n            events: {\n                onAppReady: async function() {\n                    const userInfo = await DocSpace.SDK.frames[frameId].getUserInfo();\n\n                    if (userInfo && userInfo.email === email) {\n                        onSuccessLogin();\n                    } else {\n                        const passwordHash = await onRequestPasswordHash(email);\n\n                        if (passwordHash === null || passwordHash.length <= 0) {\n                            DocSpace.SDK.frames[frameId].destroyFrame();\n                            onUnSuccessLogin();\n                            return;\n                        }\n\n                        DocSpace.SDK.frames[frameId].login(email, passwordHash)\n                            .then(function(response) {\n                                if (response.status && response.status !== 200) {\n                                    DocSpace.SDK.frames[frameId].destroyFrame();\n                                    onUnSuccessLogin();\n                                    return;\n                                }\n\n                                onSuccessLogin(passwordHash);\n                            });\n                    }\n                },\n                onAppError: async function() {\n                    if (onAppError) {\n                        onAppError();\n                    }\n                }\n            }\n        });\n    };\n\n    const logout = function(frameId, onLogout, onAppError) {\n        DocSpace.SDK.initSystem({\n            frameId: frameId,\n            width: \"100%\",\n            height: \"100%\",\n            events: {\n                onAppReady: async function() {\n                    const userInfo = await DocSpace.SDK.frames[frameId].getUserInfo();\n\n                    if (userInfo) {\n                        DocSpace.SDK.frames[frameId].logout().then(function() {\n                            onLogout();\n                        });\n                    } else {\n                        onLogout();\n                    }\n                },\n                onAppError: async function() {\n                    if (onAppError) {\n                        onAppError();\n                    }\n                }\n            }\n        });\n    };\n\n    return {\n        \"initScript\": initScript,\n        \"initialized\": checkInit,\n        \"loginByPassword\": loginByPassword,\n        \"loginByPasswordHash\": loginByPasswordHash,\n        \"logout\": logout,\n        \"apiUrl\": DOCSPACE_API_URL,\n    };\n});\n/* eslint-enable no-undef, no-console */"],"names":["define","_createScriptTag","id","url","resolve","reject","script","document","createElement","type","src","endsWith","async","onload","removeAttribute","onerror","error","setAttribute","loginByPasswordHash","frameId","email","onRequestPasswordHash","onSuccessLogin","onUnSuccessLogin","onAppError","DocSpace","SDK","initSystem","width","height","events","onAppReady","userInfo","frames","getUserInfo","passwordHash","length","destroyFrame","login","then","response","status","Promise","existedScript","getElementById","intervalHandler","setInterval","getAttribute","clearInterval","remove","body","appendChild","e","console","password","hashSettings","getHashSettings","createHash","trim","onLogout","logout"],"mappings":";;;;;AAsBAA,yDAAO,IAAI,iBAkDDC,iBAAmB,CAACC,GAAIC,IAAKC,QAASC,gBAClCC,OAASC,SAASC,cAAc,iBAEtCF,OAAOJ,GAAKA,GACZI,OAAOG,KAAO,kBACdH,OAAOI,IAAMP,IAAIQ,SAAS,KAAOR,IAtDZ,kCAsDqCA,IAAAA,mCAC1DG,OAAOM,OAAQ,EAEfN,OAAOO,OAAS,KAEZP,OAAOQ,gBAAgB,WACvBV,QAAQ,OAEZE,OAAOS,QAAWC,QAEdV,OAAOQ,gBAAgB,WACvBT,OAAOW,QAGXV,OAAOW,aAAa,UAAW,IAExBX,QAwBLY,oBAAsB,SAASC,QAASC,MAAOC,sBAAuBC,eAAgBC,iBAAkBC,YAC1GC,SAASC,IAAIC,WAAW,CACpBR,QAASA,QACTS,MAAO,OACPC,OAAQ,OACRC,OAAQ,CACJC,WAAYnB,uBACFoB,eAAiBP,SAASC,IAAIO,OAAOd,SAASe,iBAEhDF,UAAYA,SAASZ,QAAUA,MAC/BE,qBACG,OACGa,mBAAqBd,sBAAsBD,UAE5B,OAAjBe,cAAyBA,aAAaC,QAAU,SAChDX,SAASC,IAAIO,OAAOd,SAASkB,oBAC7Bd,mBAIJE,SAASC,IAAIO,OAAOd,SAASmB,MAAMlB,MAAOe,cACrCI,MAAK,SAASC,aACPA,SAASC,QAA8B,MAApBD,SAASC,cAC5BhB,SAASC,IAAIO,OAAOd,SAASkB,oBAC7Bd,mBAIJD,eAAea,mBAI/BX,WAAYZ,iBACJY,YACAA,wBAiCb,YA/JYZ,MAAMV,GAAIC,MAClB,IAAIuC,SAAQ,CAACtC,QAASC,iBAGG,oBAAboB,UAAyC,OAAbA,gBAC5BrB,QAAQ,SAGP,OAARD,WACOE,OAAO,sCAGZsC,cAAgBpC,SAASqC,eAAe1C,OAE1CyC,cAAe,KAEXE,gBAAkBC,aAAY,SACdH,cAAcI,aAAa,WAIpC,IAEHC,cAAcH,iBAGU,oBAAbpB,gBACArB,QAAQ,YAIbE,OAASL,iBAAiBC,GAAIC,IAAKC,QAASC,QAClDsC,cAAcM,SACd1C,SAAS2C,KAAKC,YAAY7C,WAE/B,SACA,OAEGA,OAASL,iBAAiBC,GAAIC,IAAKC,QAASC,QAClDE,SAAS2C,KAAKC,YAAY7C,SAEhC,MAAO8C,GACLC,QAAQrC,MAAMoC,mBA6BR,iBACa,oBAAb3B,UAAyC,OAAbA,0BAGtB,SAASN,QAASC,MAAOkC,SAAUhC,eAAgBC,iBAAkBC,YACzFN,oBACIC,QACAC,OAEAR,eAAeQ,aACLmC,mBAAqB9B,SAASC,IAAIO,OAAOd,SAASqC,+BAC7B/B,SAASC,IAAIO,OAAOd,SAASsC,WAAWH,SAASI,OAAQH,gBAIxFjC,eACAC,iBACAC,iCA2EmBN,2BA9BZ,SAASC,QAASwC,SAAUnC,YACvCC,SAASC,IAAIC,WAAW,CACpBR,QAASA,QACTS,MAAO,OACPC,OAAQ,OACRC,OAAQ,CACJC,WAAYnB,uBACea,SAASC,IAAIO,OAAOd,SAASe,cAGhDT,SAASC,IAAIO,OAAOd,SAASyC,SAASrB,MAAK,WACvCoB,cAGJA,YAGRnC,WAAYZ,iBACJY,YACAA,yBA1JK"}