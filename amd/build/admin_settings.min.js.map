{"version":3,"file":"admin_settings.min.js","sources":["../src/admin_settings.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * @module mod_onlyofficedocspace/admin_settings\n * @copyright  2025 Ascensio System SIA <integration@onlyoffice.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n **/\n/* eslint-disable no-undef, no-console */\ndefine(\n    [\n        'jquery',\n        'mod_onlyofficedocspace/docspace_integration_sdk',\n        'mod_onlyofficedocspace/password_generator',\n        'mod_onlyofficedocspace/notification',\n        'core/str',\n        'mod_onlyofficedocspace/repository'\n    ],\n    function($, DocspaceIntegrationSdk, PasswordGenerator, Notification, Str, Repository) {\n        const systemFrameId = \"oodsp-system-frame\";\n        const scriptId = 'oodsp-api-js';\n        let submitButton;\n\n        const updateSettings = async function() {\n            const url = document.getElementById(\"id_s_onlyofficedocspace_docspace_server_url\")\n                .value\n                .trim()\n                .replace(/\\/+$/g, '');\n            const email = document.getElementById(\"id_s_onlyofficedocspace_docspace_login\").value;\n            const password = document.getElementsByName(\"s_onlyofficedocspace_docspace_password\")[0].value;\n            const hashSettings = await DocSpace.SDK.frames[systemFrameId].getHashSettings();\n            const passwordHash = await DocSpace\n                .SDK\n                .frames[systemFrameId]\n                .createHash(password.trim(), hashSettings);\n            const randomPasswordHash = await DocSpace\n                .SDK\n                .frames[systemFrameId]\n                .createHash(PasswordGenerator.generate(), hashSettings);\n\n            await Repository.updateAdminSettings(\n                url,\n                email,\n                passwordHash,\n                randomPasswordHash\n            )\n            .then((response) => { // eslint-disable-next-line promise/always-return\n                if (response.status === false) {\n                    for (const warning of response.warnings) {\n                        Notification.display(warning.message, 'error');\n                    }\n                } else {\n                    window.location.reload();\n                }\n            }).catch(async(error) => {\n                if (error.errorcode === \"invalidparameter\") {\n                    Notification.display(await Str.getString(\"paramsmissingvalidationerror\", \"onlyofficedocspace\"), 'error');\n                } else {\n                    console.log(error);\n                }\n            })\n            // eslint-disable-next-line promise/always-return\n            .then(() => {\n                submitButton.removeAttribute(\"disabled\");\n            });\n        };\n\n        return {\n            init: async function(urls) {\n                const settingsForm = document.getElementById(\"adminsettings\");\n                const warningMessage = await Str.getString(\"adminsettings:urlwarning\", \"onlyofficedocspace\");\n\n                if (settingsForm) {\n                    submitButton = settingsForm.querySelector(\"[type='submit']\");\n                    const systemFrameContainer = document.createElement(\"div\");\n                    systemFrameContainer.classList.add(\"d-none\");\n                    const systemFrame = document.createElement(\"div\");\n                    systemFrame.id = systemFrameId;\n                    systemFrameContainer.appendChild(systemFrame);\n                    settingsForm.appendChild(systemFrameContainer);\n\n                    settingsForm.addEventListener(\"submit\", async function(event) {\n                        event.preventDefault();\n                        submitButton.setAttribute(\"disabled\", \"\");\n                        const url = document.getElementById(\"id_s_onlyofficedocspace_docspace_server_url\")\n                            .value\n                            .trim()\n                            .replace(/\\/+$/g, '');\n\n                        // eslint-disable-next-line no-alert\n                        if (urls.current && url !== urls.current && url !== urls.default && confirm(warningMessage) !== true) {\n                            submitButton.removeAttribute(\"disabled\");\n                            return;\n                        }\n\n                        let script = document.getElementById(scriptId);\n\n                        if (script && script.src !== url + \"/\" + DocspaceIntegrationSdk.apiUrl) {\n                            if (typeof DocSpace !== \"undefined\" && DocSpace !== null) {\n                                await DocSpace.SDK.frames[systemFrameId].destroyFrame();\n                            }\n                            script.remove();\n                            script = null;\n                            window.DocSpace = null;\n                        }\n\n                        if (!script) {\n                            await DocspaceIntegrationSdk.initScript(scriptId, url)\n                                .catch(async() => {\n                                    Notification.display(await Str.getString('docspaceunreachable', 'onlyofficedocspace'), 'error');\n                                });\n                        }\n\n                        if (typeof DocSpace === \"undefined\" || DocSpace === null) {\n                            submitButton.removeAttribute(\"disabled\");\n                            return;\n                        }\n\n                        if (DocSpace.SDK.frames[systemFrameId]) {\n                            updateSettings();\n                        } else {\n                            DocSpace.SDK.initSystem(\n                                {\n                                    frameId: systemFrameId,\n                                    events: {\n                                        \"onAppReady\": async function() {\n                                            updateSettings();\n                                        },\n                                        \"onAppError\": async function(error) {\n                                            console.log(error);\n                                            Notification.display(\n                                                await Str.getString('docspaceapperror', 'onlyofficedocspace'), 'error'\n                                            );\n                                            submitButton.removeAttribute(\"disabled\");\n                                        }\n                                    }\n                                }\n                            );\n                        }\n                    });\n                }\n            }\n        };\n    });\n/* eslint-enable no-undef, no-console */"],"names":["define","$","DocspaceIntegrationSdk","PasswordGenerator","Notification","Str","Repository","systemFrameId","submitButton","updateSettings","async","url","document","getElementById","value","trim","replace","email","password","getElementsByName","hashSettings","DocSpace","SDK","frames","getHashSettings","passwordHash","createHash","randomPasswordHash","generate","updateAdminSettings","then","response","status","warning","warnings","display","message","window","location","reload","catch","error","errorcode","getString","console","log","removeAttribute","init","urls","settingsForm","warningMessage","querySelector","systemFrameContainer","createElement","classList","add","systemFrame","id","appendChild","addEventListener","event","preventDefault","setAttribute","current","default","confirm","script","src","apiUrl","destroyFrame","remove","initScript","initSystem","frameId","events"],"mappings":";;;;;AAqBAA,+CACI,CACI,SACA,kDACA,4CACA,sCACA,WACA,sCAEJ,SAASC,EAAGC,uBAAwBC,kBAAmBC,aAAcC,IAAKC,kBAChEC,cAAgB,yBAElBC,mBAEEC,eAAiBC,uBACbC,IAAMC,SAASC,eAAe,+CAC/BC,MACAC,OACAC,QAAQ,QAAS,IAChBC,MAAQL,SAASC,eAAe,0CAA0CC,MAC1EI,SAAWN,SAASO,kBAAkB,0CAA0C,GAAGL,MACnFM,mBAAqBC,SAASC,IAAIC,OAAOhB,eAAeiB,kBACxDC,mBAAqBJ,SACtBC,IACAC,OAAOhB,eACPmB,WAAWR,SAASH,OAAQK,cAC3BO,yBAA2BN,SAC5BC,IACAC,OAAOhB,eACPmB,WAAWvB,kBAAkByB,WAAYR,oBAExCd,WAAWuB,oBACblB,IACAM,MACAQ,aACAE,oBAEHG,MAAMC,eACqB,IAApBA,SAASC,WACJ,MAAMC,WAAWF,SAASG,SAC3B9B,aAAa+B,QAAQF,QAAQG,QAAS,cAG1CC,OAAOC,SAASC,YAErBC,OAAM9B,MAAAA,QACmB,qBAApB+B,MAAMC,UACNtC,aAAa+B,cAAc9B,IAAIsC,UAAU,+BAAgC,sBAAuB,SAEhGC,QAAQC,IAAIJ,UAInBX,MAAK,KACFtB,aAAasC,gBAAgB,sBAI9B,CACHC,KAAMrC,eAAesC,YACXC,aAAerC,SAASC,eAAe,iBACvCqC,qBAAuB7C,IAAIsC,UAAU,2BAA4B,yBAEnEM,aAAc,CACdzC,aAAeyC,aAAaE,cAAc,yBACpCC,qBAAuBxC,SAASyC,cAAc,OACpDD,qBAAqBE,UAAUC,IAAI,gBAC7BC,YAAc5C,SAASyC,cAAc,OAC3CG,YAAYC,GAAKlD,cACjB6C,qBAAqBM,YAAYF,aACjCP,aAAaS,YAAYN,sBAEzBH,aAAaU,iBAAiB,UAAUjD,eAAekD,OACnDA,MAAMC,iBACNrD,aAAasD,aAAa,WAAY,UAChCnD,IAAMC,SAASC,eAAe,+CAC/BC,MACAC,OACAC,QAAQ,QAAS,OAGlBgC,KAAKe,SAAWpD,MAAQqC,KAAKe,SAAWpD,MAAQqC,KAAKgB,UAAuC,IAA5BC,QAAQf,4BACxE1C,aAAasC,gBAAgB,gBAI7BoB,OAAStD,SAASC,eA3ErB,gBA6EGqD,QAAUA,OAAOC,MAAQxD,IAAM,IAAMT,uBAAuBkE,SACpC,oBAAb/C,UAAyC,OAAbA,gBAC7BA,SAASC,IAAIC,OAAOhB,eAAe8D,eAE7CH,OAAOI,SACPJ,OAAS,KACT7B,OAAOhB,SAAW,MAGjB6C,cACKhE,uBAAuBqE,WAvFhC,eAuFqD5D,KAC7C6B,OAAM9B,UACHN,aAAa+B,cAAc9B,IAAIsC,UAAU,sBAAuB,sBAAuB,YAI3E,oBAAbtB,UAAyC,OAAbA,SAKnCA,SAASC,IAAIC,OAAOhB,eACpBE,iBAEAY,SAASC,IAAIkD,WACT,CACIC,QAASlE,cACTmE,OAAQ,YACUhE,iBACVD,6BAEUC,eAAe+B,OACzBG,QAAQC,IAAIJ,OACZrC,aAAa+B,cACH9B,IAAIsC,UAAU,mBAAoB,sBAAuB,SAEnEnC,aAAasC,gBAAgB,gBAnB7CtC,aAAasC,gBAAgB"}